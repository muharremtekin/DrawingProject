@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<style>
    #draw-canvas {
        background-color: #ddd;
    }
</style>

<div>
    <input type="color" id="color" value="#000000" />
    <input type="button" id="clear" value="Clear" />
</div>
<div>
    <canvas id="draw-canvas" height="500" width="800"></canvas>
</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>
<script>

    var unsentStrokes = [];

    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/draw")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on('newStroke', drawStroke)
    connection.on('clearCanvas', clearCanvas)

    async function start() {
        try {
            await connection.start();
            console.log("SignalR Connected.");
        } catch (err) {
            console.log(err);
            setTimeout(start, 5000);
        }
    };

    connection.onclose(async () => {
        await start();
    });

    // Start the connection.
    start()
        .then(() => console.log('connected!'))
        .catch(err => console.log(err))

    const canvas = document.getElementById("draw-canvas")
    const ctx = canvas.getContext("2d")

    var clearButton = document.getElementById('clear')
    clearButton.addEventListener('click', clearCanvas)

    var colorButton = document.getElementById('color')

    var penDown = false
    var previous = { x: 0, y: 0, ts: 0 };

    canvas.addEventListener('mousedown', handleMouseDown)
    canvas.addEventListener('mouseup', handleMouseUp)
    canvas.addEventListener('mousemove', handleMouseMove)

    function handleMouseDown(ev) {
        ev.preventDefault()
        penDown = true
    }

    function handleMouseUp(ev) {
        ev.preventDefault()
        penDown = false
    }

    function handleMouseMove(ev) {
        ev.preventDefault()
        const millisecondsSinceLastStroke = (new Date()).getTime() - previous.ts
        if (penDown && millisecondsSinceLastStroke < 100) {
            const start = {
                x: previous.x - canvas.offsetLeft,
                y: previous.y - canvas.offsetTop
            }
            const end = {
                x: ev.pageX - canvas.offsetLeft,
                y: ev.pageY - canvas.offsetTop
            }
            drawStroke(start, end, colorButton.value)
            unsentStrokes.push({
                start,
                end,
                color: colorButton.value
            })
        }
        previous = {
            x: ev.pageX,
            y: ev.pageY,
            ts: (new Date()).getTime()
        }
    }

    function drawStroke(start, end, color) {
        color = color || "#000"
        ctx.strokeStyle = color
        ctx.beginPath()
        ctx.moveTo(start.x, start.y)
        ctx.lineTo(end.x, end.y)
        ctx.stroke()
    }

    setInterval(() => {
        if (unsentStrokes.length) {
            connection.send('NewStrokes', unsentStrokes);
            unsentStrokes = [];
        }
    }, 250);

    function clearCanvas() {
        ctx.clearRect(0, 0, canvas.width, canvas.height)
    }

</script>